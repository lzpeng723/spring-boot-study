// 所有子项目的通用配置
subprojects {
    buildscript {
        ext {
//            springBootVersion = '1.5.17.RELEASE'
//            springBootVersion = '2.0.4.RELEASE'
            springBootVersion = '2.0.6.RELEASE'
        }
        repositories {
            mavenLocal()
            maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
            mavenCentral()
            maven { url "http://repo.spring.io/snapshot" }
            maven { url "http://repo.spring.io/milestone" }
            maven { url 'http://maven.springframework.org/release' }
            maven { url 'http://maven.springframework.org/milestone' }
            jcenter()
        }
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        }
    }
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = 'com.lzpeng.sprintboot'
    version = '0.0.1-SNAPSHOT'
    // JVM 版本号要求
    sourceCompatibility = 11
    targetCompatibility = 11
    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url 'http://maven.springframework.org/release' }
        maven { url 'http://maven.springframework.org/milestone' }
        jcenter()
    }
    dependencies {
        compileOnly('org.projectlombok:lombok')
        implementation ('cn.hutool:hutool-all:4.1.14')
        testImplementation('org.springframework.boot:spring-boot-starter-test')
    }
    jar {
        manifest {
            attributes("Implementation-Title": "Gradle")
        }
    }
    // 显示当前项目下所有用于 compile 的 jar.
    task listJars(description: 'Display all compile jars.') << {
        configurations.compile.each { File file -> println file.name }
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}